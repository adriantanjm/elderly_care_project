{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Box.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { scaleOrdinal, scaleBand, scaleThreshold, scaleLinear } from \"d3-scale\";\n  import { schemeAccent, schemeOranges } from \"d3-scale-chromatic\";\n  import { plnAreas } from \"./planning_areas.js\";\n  import { data } from \"./popdata.js\";\n  import { elder_facilities } from \"./elder_facilities.js\";\n  import { format, formatPrefix } from \"d3-format\";\n  import Box from \"./Box.svelte\";\n  import { hexGrid } from \"./hex_grid.js\";\n  import {\n    Graphic,\n    Section,\n    PointLayer,\n    Rectangle,\n    RectangleLayer,\n    PolygonLayer,\n    DiscreteLegend,\n    XAxis,\n    YAxis,\n    createGeoScales,\n    Label,\n    Title\n  } from \"@snlab/florence\";\n  import DataContainer from \"@snlab/florence-datacontainer\";\n\n  const padding = { left: 90, bottom: 30, top: 0, right: 10 };\n\n  // map data\n  const planningAreas = new DataContainer(plnAreas);\n  const myGeoScale = createGeoScales(planningAreas.domain(\"$geometry\"));\n  const towns = planningAreas.column(\"PLN_AREA_N\");\n\n  // pop data\n  const popdata = new DataContainer(data);\n\n  function filterElderly(row) {\n    return [\n      \"60_to_64\",\n      \"65_to_69\",\n      \"70_to_74\",\n      \"75_to_79\",\n      \"80_to_84\",\n      \"85_to_89\",\n      \"90_and_over\"\n    ].includes(row.age_group);\n  }\n\n  // population per town\n  const popTowns = popdata\n    .groupBy(\"planning_area\")\n    .summarise({ residents_per_town: { Resident: \"sum\" } });\n  // elderly per town\n  const elderly = popdata\n    .filter(filterElderly)\n    .groupBy(\"planning_area\")\n    .summarise({ elderly_per_town: { Resident: \"sum\" } });\n  const percentElderly = elderly.map(\"elderly_per_town\", (d, i) => {\n    return popTowns.column(\"residents_per_town\")[i] === 0\n      ? 0\n      : d / popTowns.column(\"residents_per_town\")[i];\n  });\n  elderly.addColumn(\"percent_elderly\", percentElderly);\n\n  // binning\n  const numClass = 5;\n  const binnedElderly = elderly.bin({\n    groupBy: \"percent_elderly\",\n    method: \"EqualInterval\",\n    numClasses: numClass\n  });\n  const classBins = binnedElderly.column(\"bins\");\n  function binsToThreshold(bins) {\n    const thresholds = [];\n    for (let index = 1; index < bins.length; index++) {\n      const bin = bins[index];\n      thresholds.push(bin[0]);\n    }\n    return thresholds;\n  }\n  const classThresholds = binsToThreshold(classBins);\n  const myColorscale = scaleThreshold()\n    .domain(classThresholds)\n    .range(schemeOranges[numClass]);\n\n  // augment thresholds from\n  // [0.06530183727034121, 0.13060367454068242, 0.1959055118110236, 0.26120734908136484] to\n  // [0, 0.06530183727034121, 0.13060367454068242, 0.1959055118110236, 0.26120734908136484, 0.32650918635170606]\n  const boundedThresholds = [\n    binnedElderly.domain(\"bins\")[0],\n    ...classThresholds,\n    binnedElderly.domain(\"bins\")[1]\n  ];\n  // round to 2dp\n  const boundedThresholds2dp = boundedThresholds.map(format(\".2f\"));\n\n  // KIM's Code- Adding facilities data and adding boxes of different facilities and their quantity per town\n  // facilities data-from Kim\n  const el_Facilities = new DataContainer(elder_facilities);\n  // filter by hovered area, grouped by number of facilities per town- from Kim\n  let filteredTown, facilitiesPerTown;\n  $: {\n    if (hoveredAreaIndex === undefined) {\n      filteredTown = el_Facilities;\n    } else {\n      filteredTown = el_Facilities.filter(\n        row => row[\"PLANNING AREAS\"] === towns[hoveredAreaIndex]\n      ); // i changed the key here\n    }\n    facilitiesPerTown = filteredTown\n      .groupBy(\"TYPE OF FACILITIES\")\n      .summarise({ total_facilities: { TOTAL: \"sum\" } });\n  }\n  // set up hover handlers- from Kim\n  let mousePosition = undefined;\n  let selectedAreainfo;\n  $: selectedAreainfo = planningAreas.column(\"PLN_AREA_N\")[hoveredAreaIndex];\n  let hoveredAreaIndex = undefined;\n\n  function handleMouseover(event) {\n    hoveredAreaIndex = event.key;\n    mousePosition = {\n      x: event.localCoordinates.x,\n      y: event.localCoordinates.y\n    };\n  }\n  function handleMouseout() {\n    hoveredAreaIndex = undefined;\n    mousePosition = undefined;\n  }\n\n  // Sunny's Code- Containing formatPrefix\n  // Population Pyramid- from Sunny\n  const tickFormatter = formatPrefix(\".0\", 1e3); // unit scale on x axis, 1x10^3- unit:thousands\n\n  let townFilter, grouped, maleValues, femaleValues, ages;\n  $: {\n    if (clickedAreaIndex === undefined) {\n      townFilter = popdata;\n    } else {\n      townFilter = popdata.filter(\n        row => row.planning_area === towns[clickedAreaIndex]\n      ); // filter out the row which planning_area has the same string as towns[] , the clickedAreaIndex would from the event key\n    }\n\n    grouped = townFilter.groupBy(\"sex\");\n    // grouped datacontainer has a lot of subcontainers\n\n    [maleValues, femaleValues] = grouped.map(\"$grouped\", group =>\n      group.column(\"Resident\")\n    ); // group is itâ€™s just an argument to an anonymous function, dont need be group can be anything\n    ages = grouped.map(\"$grouped\", group => group.column(\"age_group\"))[0];\n  }\n\n  // domainsF\n  const valueDomain = popdata.domain(\"Resident\");\n  const ageDomain = popdata.domain(\"age_group\");\n\n  // scales\n  const scaleXresident = scaleLinear().domain([0, valueDomain[1]]); // 2nd number from valueDomain, the largest number from Resident column\n  const scaleYage_group = scaleBand()\n    .domain(ageDomain)\n    .padding(0.2); // change the bar size\n\n  let clickedAreaIndex = undefined;\n  function handleClick(event) {\n    clickedAreaIndex = event.key;\n  }\n</script>\n\n<head>\n  <title>Visualising the Distribution of Elderly Population Across Singapore</title>\n</head>\n\n  <div class=\"title\">\n    <!-- title/header content goes here -->\n    <h1>\n     Visualising the Distribution of Elderly Population across Singapore\n    </h1>\n    <h2>\n      With data on elderly care facilities distribution across the Country\n    </h2>\n    <h3>Dashboard made by Adrian, Kimberly, Sunny</h3>\n    <h3>With the help of Jo Hsi and Bianchi</h3>\n  </div>\n\n\n\n<div class=\"graph\">\n  <div class=\"main-chart\">\n  <Graphic width=\"100%\" height=\"100%\" viewBox=\"0 0 1250 600\">\n    <!-- Sunny's Pyramid Chart -->\n    <Title   \n        x={200}\n        y={15}\n        title={clickedAreaIndex === \"\" ? \"Singapore\" : towns[clickedAreaIndex]} \n        titleFontFamily=\"Josefin Sans\", sans-serif\n      />\n      <!-- male chart -->\n      <Section\n        x1={0}\n        x2={205}\n        y1={30}\n        y2={550}\n        scaleX= {scaleXresident}\n        scaleY= {scaleYage_group}\n        padding={{ top: 0, bottom: 30, left: 0, right: 0}}\n        flipX\n        flipY\n      >\n        <RectangleLayer \n          x1={0}\n          x2={maleValues}\n          y1={ages}\n          y2={({scaleY}) => ages.map(age_group => scaleY(age_group) + scaleY.bandwidth())}\n          fill={'steelblue'}\n        />\n        <Title title=\"Male\" \n        titleFontFamily=\"Josefin Sans\", sans-serif/>\n        <XAxis labelFormat={tickFormatter} baseLine={false} \n        labelRotate=-40/>\n      </Section>\n      <!-- female chart -->\n      <Section\n        x1={205}\n        x2={410}\n        y1={30}\n        y2={550}\n        scaleX= {scaleXresident}\n        scaleY= {scaleYage_group}\n        padding={{ top: 0, bottom: 30, left: 0, right: 0}}\n        flipY\n      >\n        <RectangleLayer \n          x1={0}\n          x2={femaleValues}\n          y1={ages}\n          y2={({scaleY}) => ages.map(age_group => scaleY(age_group) + scaleY.bandwidth())}\n          fill={'crimson'}\n        />\n        <Title title=\"Female\" \n        titleFontFamily=\"Josefin Sans\", sans-serif/>\n        <XAxis labelFormat={tickFormatter} baseLine={false} \n        labelRotate=-40/>\n        <YAxis flip={true}/>\n      </Section> \n    <!-- </Section> -->\n    \n    <!-- Adrian's Main map and legend  -->\n    <Section\n        x1={350}\n        x2={1025}\n        y1={10}\n        y2={610}\n      {padding}\n      {...myGeoScale}\n      flipY>\n      {#each planningAreas.rows() as row, i (row.$key)}\n      <PolygonLayer \n          geometry={planningAreas.column('$geometry')}\n          stroke={'white'}\n          strokeWidth={1} \n          fill={elderly.column('percent_elderly').map(myColorscale)}\n          onMouseover={handleMouseover}\n          onMouseout={handleMouseout}\n          onClick={handleClick}\n        />\n        {/each}\n      {#if mousePosition !== undefined}\n      <Rectangle\n      x1={mousePosition.x + 1200}\n      x2={mousePosition.x + 30000}\n      y1={mousePosition.y}\n      y2={mousePosition.y + 3000}\n      fill={'white'}\n      opacity={0.7}\n      stroke={'white'}\n      />\n      <Label\n      x={mousePosition.x + 1700}\n      y={mousePosition.y + 1500}\n      anchorPoint={'l'}\n      fill={'rgb(10, 96, 132)'}\n      fontFamily={'Josefin Sans'}\n      text={`${selectedAreainfo}: ${format(\".2%\")(elderly.column('percent_elderly')[hoveredAreaIndex])}`}\n      />\n{/if}\n    </Section>\n    <Section\n        x1={850}\n        x2={1300}\n        y1={20}\n        y2={500}\n        {padding}\n      >\n\n      <DiscreteLegend\n      title={'Percentage of Elderly'}\n      fill={scaleLinear().domain(boundedThresholds2dp).range(schemeOranges[numClass])}\n      labels={boundedThresholds2dp}\n      labelCount={numClass}\n      orient={'vertical'}\n      height={50}\n      titleX={() => 1100}\n      titleY={() => 30}\n      hjust={'center'}\n      flip\n      />\n    </Section> \n\n  </Graphic>\n\n  <!-- Kim's Box svelte for Number and Type of Facilities -->\n<div class= \"style_box\">\n  <Box>\n    <span slot=\"name\">\n      Home care\n    </span>\n    <span slot=\"address\">\n      No. of<br>\n      facilities\n      {facilitiesPerTown.column('total_facilities')[0]}\n    </span>\n  </Box>\n  <Box>\n    <span slot=\"name\">\n      Day care\n    </span>\n    <span slot=\"address\">\n      No. of<br>\n      facilities\n      {facilitiesPerTown.column('total_facilities')[1]}\n    </span>\n  </Box>\n  <Box>\n    <span slot=\"name\">\n      Stay in\n    </span>\n    <span slot=\"address\">\n      No. of<br>\n      facilities\n      {facilitiesPerTown.column('total_facilities')[2]}\n    </span>\n  </Box>\n</div>\n</div>\n</div>\n\n\n\n<div class=\"absolute4\">\n<p class=\"intro\">Click on planning area to see population pyramid.</p>\n</div>\n\n\n\n\n<div class=\"explanation\">\n<p class=\"texthead\">Elderly Care and its Relevance to Urban Planning</p>\n<p class=\"textbody\">\nLike many Asian societies, Singapore is an ageing society with low birth-replacement rate. As we can see on the population pyramid in this slide, a significantly large cohort of Singaporeans will progress into their twilight years, many are bound to experience physical deterioration and cognitive decline. Therefore, it is important that we consider these impending demographic transformations that will require new forms of resources. \nHowever, what kinds of elderly care facilities do we need? And we are providing enough elderly care facilities to ageing towns? These are questions which bugged many urban planners in Asia, specifically in ageing societies like Japan and Singapore. \n\n</p>\n</div>\n\n<style>\n  h1,\n  h2,\n  h3 {\n    font-family: \"Josefin Sans\", sans-serif;\n    font-weight: 200;\n    text-align: center;\n    color: rgb(10, 96, 132);\n  }\n\n  h1 {\n    font-size: 30px;\n    font-weight: bold;\n  }\n\n  h2 {\n    font-size: 20px;\n  }\n\n  h3 {\n    font-size: 14px;\n  }\n\n  p {\n    font-family: \"Josefin Sans\", sans-serif;\n    font-weight: 200;\n    text-align: center;\n    font-size: 12px;\n    color: rgb(5, 10, 52);\n  }\n\n  .intro {\n    font-family: \"Josefin Sans\", sans-serif;\n    font-weight: 100;\n    text-align: left;\n    font-size: 14px;\n    color: rgb(10, 96, 132);\n  }\n\n  .texthead {\n    font-family: \"Josefin Sans\", sans-serif;\n    font-weight: bold;\n    text-align: left;\n    font-size: 20px;\n    color: rgb(10, 96, 132);\n  }\n\n  .textbody {\n    font-family: \"Josefin Sans\", sans-serif;\n    font-weight: 100;\n    text-align: left;\n    font-size: 16px;\n    text-align: justify;\n    line-height: 1.5;\n    color: rgb(0, 0, 0);\n  }\n\n  div.absolute4 {\n    position: absolute;\n    top: 30%;\n    left: 60%;\n    width: 50%;\n    height: 60%;\n  }\n\n  div.explanation {\n    position: absolute;\n    top: 120%;\n    left: 8%;\n    width: 500px;\n    height: 100px;\n  }\n\n  /* set up box-style- from Kim */\n  .style_box {\n    display: flex;\n    flex-direction: row;\n    column-gap: 20px;\n    position: absolute;\n    top: 85%;\n    left: 75%;\n    width: 10%;\n    height: 23%;\n  }\n\n  /* .hover-instruction {\n                                      position: absolute;\n                                      top: 35px;\n                                      right: 265px;\n                                      width: 100px;\n                                      height: 100px;\n                                    } */\n\n  /* div.absolute3 {\n                                      position: absolute;\n                                      top: 700px;\n                                      left: 50px;\n                                      width: 500px;\n                                      height: 100px;\n                                    }\n\n                                    div.absolute5 {\n                                      position: absolute;\n                                      top: 750px;\n                                      left: 50px;\n                                      width: 500px;\n                                      height: 500px;\n                                    } */\n</style>",
    "<!-- <style>\r\n\t.box {\r\n\t  width: 150px;\r\n\t  border: 1px solid #aaa;\r\n\t  border-radius: 2px;\r\n\t  box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);\r\n\t  padding: 1em;\r\n\t  margin: 0 0 1em 0;\r\n\t}\r\n</style>\r\n\r\n<div class=\"box\">\r\n\t<slot></slot>\r\n</div> -->\r\n\r\n<!-- BOX DETAILS -->\r\n<style>\r\n\t.box {\r\n\t\tborder: 1px solid #aaa;\r\n\t\tborder-radius: 2px;\r\n\t\tbox-shadow: 2px 2px 8px rgba(0,0,0,0.1);\r\n\t\tpadding: 10%;\r\n    margin: 0 0 0 0;\r\n\t\tfont-family: \"Josefin Sans\", sans-serif;\r\n    font-weight: 10px;\r\n    text-align: center;\r\n    color: rgb(10, 96, 132);\r\n\t}\r\n\r\n\th2 {\r\n\t\tpadding: 0 0 0.2em 0;\r\n\t\tmargin: 0 0 1em 0;\r\n\t\tborder-bottom: 1px solid #000000;\r\n\t\tfont-weight: 10px;\r\n\t}\r\n\r\n\t.address {\r\n\t\tpadding: 0 0 0 0;\r\n\t\tbackground:  0 0 no-repeat;\r\n\t\tbackground-size: 20px 20px;\r\n\t\tmargin: 0 0 0.5em 0;\r\n\t\tline-height: 1;\r\n\t}\r\n\r\n\t.address { background-image: url(tutorial/icons/map-marker.svg) }\r\n\t.missing { color: #999 }\r\n</style>\r\n\r\n<article class=\"box\">\r\n\t<h2>\r\n\t\t<slot name=\"name\">\r\n\t\t\t<span class=\"missing\">Unknown name</span>\r\n\t\t</slot>\r\n\t</h2>\r\n\r\n\t<div class=\"address\">\r\n\t\t<slot name=\"address\">\r\n\t\t\t<span class=\"missing\">Unknown address</span>\r\n\t\t</slot>\r\n\t</div>\r\n\r\n</article>"
  ],
  "names": [],
  "mappings": "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"
}